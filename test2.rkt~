#lang racket

; Your code here!



;SK (satisfy-item-doreka satify-item palace)
(define (satisfy-item-doreka? card-item player-item)
    (cond ((null? player-item) #f)
          ((member (car player-item) card-item) #t)
          (else (satisfy-item-doreka? card-item (cdr player-item)))))

;王宮関数　テスト待ち
(define palace (lambda (W A) ;world->world '(#f item 30 20 10 #f #f)
                   (match-let (((WORLD PLAYERS ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN) W))
                        (let ((c-player (list-ref PLAYERS (list-ref PHASE 0))))
                            (display "君は王の前でパフォーマンスを披露した")
                            (newline)
                            (let ((dice (random 1 7)))
                              (case dice
                                ((1) (display (format "~aを授けよう~%" (list-ref A dice))))
                                ((or 2 3 4) (display "~aゴールドを授けよう~%" (list-ref A dice)))
                                ((5) (display (format "何もやらん！~%")))
                                ((6) (display (format "牢獄行きじゃ！~%"))))                         
                                (WORLD (list-set PLAYERS (car PHASE) (list-set PLAYERS (list-ref PHASE 0)
                                                 (case dice
                                       ((1) (add-item c-player (list-ref A dice)))
                                       ((2) (add-gold c-player (list-ref A dice)))
                                       ((3) (add-gold c-player (list-ref A dice)))
                                       ((4) (add-gold c-player (list-ref A dice)))
                                       ((5) c-player)
                                       ((6) c-player))))
                                       ENEMIES MAPLIST SMAP PMAP PHASE
                                                (case dice
                                                  ((6) (list-set COORD (list-ref PHASE 0) 24))
                                                  (else COORD))
                                                 WIN))))))
                                       
(define (add-item player item) ;player->player
    (match-let (((PLAYER NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) player))
               (NAME NAME SKILLP HITP LUCKP EQUIP GOLD (cons item ITEM) SPECIAL WIN)))

(define (add-gold player gold) ;player->player
    (match-let (((PLAYER NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) player))
               (PLAYER NAME SKILLP HITP LUCKP EQUIP (+ gold (PLAYER-GOLD)) ITEMS SPECIAL WIN)))
           
;DA
(define shop (lambda (W A) ;テスト待ち
    (match-let (((WORLD PLAYERS ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN) W))
               (let ((c-player (list-ref PLAYERS (list-ref PHASE 0))))
                    (match-let (((PLAYER  NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) c-player))
                            (let ((item-list (filter (lambda (x) (> GOLD (ITEM-COST x)) (list-ref A 0))))
                        (for-each display (map (match-lambda (`(,num ,name . ,cost)
                                                    (format "[~a][~a cost:~a]~%" num name cost)))
                                    (enumerate (map (lambda (x) `(,(ITEM-NAME x) ,(ITEM-COST x))) A) 1)))
                                (display "どれを買うかね?") (newline)
                                (let ((answer (string->number (read-line))))
                                     (cond ((= 0 answer) W)
                                           ((> answer (length A)) (shop W A))
                                           (else (begin 
                            (display (format "~aのお買い上げありがとうございます~%") (ITEM-NAME (list-ref item-list (- answer 1))))
                            (let* ((new-item (cons (list-ref item-list (- answer 1)) PLAYER-ITEM))
                                   (new-gold (- GOLD (ITEM-COST (list-ref item-list (- answer 1)))))
                                   (new-player (PLAYER NAME SKILLP HITP LUCKP EQUIP new-gold new-item SPECIAL WIN))                                   
                                   (new-players (list-set PLAYERS (car PHASE) new-player)))
                              (shop (WORLD new-players ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN A))))))))))))))
                                           
;selectにメッセージを引数として設定する!
;PLAYERのスロットにお尋ねスロットを作ること!


;ステータスを一気に変更する関数を書こうと思ったが意味ないか・・
(define change-player-status (lambda (W A) ;引数はただのリストで一気に適用する
     (match-let (((WORLD PLAYERS ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN) W))
          (let ((c-player (list-ref PLAYERS (list-ref PHASE 0))))
               (match-let (((PLAYER NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) c-player))
               (let ((new-player (PLAYER NAME ....)))
               (WORLD ...)))))))


;後はテスト
(define satify-status (lambda (W A)
     (match-let (((WORLD PLAYERS ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN) W))
          (let ((c-player (list-ref PLAYERS (list-ref PHASE 0))))
               (match-let (((PLAYER NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) c-player))            
               (cond ((satify-status? c-player (list-ref A 0)) W) ;満たしていれば素通り
                     (else ((list-ref A 1) W A)))))))) ;ここではA-LISTにnext-playerを入れておく
                 
;kokokara
(define poltergeist (lambda (W A)
     (match-let (((WORLD PLAYERS ENEMIES MAPLIST SMAP PMAP PHASE COORD WIN) W))
          (let ((c-player (list-ref PLAYERS (list-ref PHASE 0))))
                        (let loop ((p-skill (car (PLAYER-SKILLP))) (e-skill (ENEMY-SKILLP)) (count 0))
                             (cond ((= 3 count) ((list-ref A 1))
                                 (else (
                        (display "[0]逃げ出す [1]踏ん張る") (newline)
                        (let ((answer (string->number (read-line))))
                             (cond ((= 0 answer) ((list-ref A 0) W))
                                   ((= 1 answer) (loop (p-skill e-skill (cond ((> (+ (dice) p-skill) (+ (dice) e-skill)) (+ count 1))
                                                                              (else 0)))))
                                                                          (else (loop p-skill e-skill count))))))))))))






